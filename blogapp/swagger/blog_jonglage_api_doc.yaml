# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Blog Jonglage API
  description: Get to a better understanding of the juggling world
  version: "1.0.0"
# the domain of the service
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /
produces:
  - application/json
paths:
  /:
    get:
      summary: HTML of the website homepage
      produces:
        - text/HTML
      tags:
        - Homepage

  /initialize:
    get:
      summary: Initialize the database
      produces:
        - text/HTML
      tags:
        - Initialization

  /categories/{id}:
    get:
      summary: HTML for each category
      produces:
        - text/HTML
      parameters:
        - name: id
          in: path
          description: Identifier of the category.
          required: true
          type: string
      tags:
        - Categories

  /categories/{id}/json:
    get:
      summary: Retrieve one category by id.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Identifier of the category.
          required: true
          type: string
      tags:
        - Categories

  /categories/create:
    post:
      summary: Create one new category
      parameters:
        - name: name
          in: formData
          description: Name of the category
          required: true
          type: string
        - name: id
          in: formData
          description: Id of the category
          required: true
          type: string
        - name: description
          in: formData
          required: false
          type: string
      tags:
        - Categories

  /categories/{id}/modify:
    post:
      summary: Modify one category by id
      produces:
        - text/html
      parameters:
        - name: id
          in: path
          description: Identifier of the category.
          required: true
          type: string
        - name: name
          in: formData
          description: The name of the category.
          required: False
          type: string
        - name: description
          in: formData
          description: Description of the category.
          required: False
          type: string
      tags:
        - Categories

  /categories/{id}/delete:
    delete:
      summary: Delete one category.
      produces:
        - test/html
      parameters:
        - name: id
          in: path
          description: Identifier of the category.
          required: true
          type: string
      tags:
        - Categories
        
  /articles/{id}:
    get:
      summary: Send all the content of an article
      produces:
        - text/HTML
      parameters:
        - name: id
          in: path
          description: Identifier of the article.
          required: true
          type: string
      tags:
        - Articles

  /articles/create:
    post:
      summary: Create one new article
      parameters:
        - name: name
          in: formData
          description: Name of the article.
          required: true
          type: string
        - name: author
          in: formData
          description: Author of the article.
          required: true
          type: string
        - name: description
          in: formData
          description: Description of the article.
          required: true
          type: string
        - name: content
          in: formData
          description: Content of the article.
          required: true
          type: string
        - name: category
          in: formData
          description: Category of the article.
          required: true
          type: string
        - name: tags
          in: formData
          description: List of tags for the article. Separe all tags by comas like "tag1, tag2"
          required: true
          type: string
        - name: is_beginner
          in: formData
          description: Defines if the article is destined to beginners or not
          required: true
          type: boolean
          default: False
        - name: difficulty
          in: formData
          description: The difficulty of the article
          required: true
          type: integer
      tags:
        - Articles

  /articles/{id}/modify:
    post:
      summary: Modify one existing article.
      parameters:
        - name: id
          in: path
          description: Identifier of the article.
          required: true
          type: string
        - name: name
          in: formData
          description: Name of the article.
          required: false
          type: string
        - name: author
          in: formData
          description: Author of the article.
          required: false
          type: string
        - name: description
          in: formData
          description: Description of the article.
          required: false
          type: string
        - name: content
          in: formData
          description: Content of the article.
          required: false
          type: string
        - name: category
          in: formData
          description: Category of the article.
          required: false
          type: string
        - name: tags
          in: formData
          description: List of tags for the article. Separe all tags by comas like "tag1,tag2"
          required: false
          type: string
        - name: is_beginner
          in: formData
          description: Defines if the article is destined to beginners or not
          required: false
          type: boolean
        - name: difficulty
          in: formData
          description: The difficulty of the article
          required: false
          type: integer
      tags:
        - Articles

  /articles/{id}/json:
    get:
      summary: Retrieve one article by id.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Identifier of the tag.
          required: true
          type: string
      tags:
        - Articles

  /articles/{id}/delete:
    delete:
      summary: Delete one article.
      produces:
        - test/html
      parameters:
        - name: id
          in: path
          description: Identifier of the article.
          required: true
          type: string
      tags:
        - Articles

  /tags/create:
    post:
      summary: Create one new tag
      parameters:
        - name: name
          in: formData
          description: Name of the tag
          required: true
          type: string
        - name: id
          in: formData
          description: Id of the tag
          required: true
          type: string
        - name: description
          in: formData
          required: false
          type: string
      tags:
        - Tags

  /tags/{id}/json:
    get:
      summary: Retrieve one tag by id
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Identifier of the tag.
          required: true
          type: string
      tags:
        - Tags

  /tags/{id}/modify:
    post:
      summary: Modify one tag by id
      produces:
        - text/html
      parameters:
        - name: id
          in: path
          description: Identifier of the tag.
          required: true
          type: string
        - name: name
          in: formData
          description: The name of the tag.
          required: False
          type: string
        - name: description
          in: formData
          description: Description of the tag.
          required: False
          type: string
      tags:
        - Tags

  /tags/{id}/delete:
    delete:
      summary: Delete one tag
      produces:
        - test/html
      parameters:
        - name: id
          in: path
          description: Identifier of the tag.
          required: true
          type: string
      tags:
        - Tags
        
